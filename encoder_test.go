package amf

import (
	"bytes"
	"testing"
	"github.com/marcuswu/amf/amf3"
//	"os"
)

func TestWriteAMFPacket(t *testing.T) {
	//Create a Packet and then encode it -- compare the bytes generated
	packet := NewPacket(0, 1)
	packet.version = 3

	message := Message{}

	packetBody := &amf3.ArrayType{}
	packetBody.Dense = make([]interface{}, 1)

	internalArray := &amf3.ArrayType{}
	internalArray.Dense = make([]interface {}, 7)
	internalArray.Dense[0] = amf3.IntegerType(54)
	internalArray.Dense[1] = amf3.IntegerType(1)
	internalArray.Dense[2] = amf3.StringType("81b2b4debe75a4d-569396443")
	internalArray.Dense[3] = amf3.StringType("")
	internalArray.Dense[4] = amf3.StringType("359125051561274")
	internalArray.Dense[5] = amf3.StringType("81b2b4debe75a4d")
	internalArray.Dense[6] = amf3.NullStringType("")

	packetBody.Dense[0] = internalArray

	message.targetUri = "Login.processLogin"
	message.responseUri = "/0"
	message.data = packetBody

	packet.messages[0] = &message

	var buffer *bytes.Buffer = &bytes.Buffer{}
	encoder := NewEncoder(buffer)
	encoder.Encode(packet)

	var expect []byte = []byte{0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x12, 0x4C, 0x6F, 0x67, 0x69, 0x6E, 0x2E,
	0x70, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x4C, 0x6F, 0x67, 0x69, 0x6E, 0x00, 0x02, 0x2F, 0x30, 0x00, 0x00, 0x00,
	0x01, 0x11, 0x09, 0x03, 0x01, 0x09, 0x0F, 0x01, 0x04, 0x36, 0x04, 0x01, 0x06, 0x33, 0x38, 0x31, 0x62, 0x32, 0x62,
	0x34, 0x64, 0x65, 0x62, 0x65, 0x37, 0x35, 0x61, 0x34, 0x64, 0x2D, 0x35, 0x36, 0x39, 0x33, 0x39, 0x36, 0x34, 0x34,
	0x33, 0x06, 0x01, 0x06, 0x1F, 0x33, 0x35, 0x39, 0x31, 0x32, 0x35, 0x30, 0x35, 0x31, 0x35, 0x36, 0x31, 0x32, 0x37,
	0x34, 0x06, 0x1F, 0x38, 0x31, 0x62, 0x32, 0x62, 0x34, 0x64, 0x65, 0x62, 0x65, 0x37, 0x35, 0x61, 0x34, 0x64, 0x06,
	0x01}

	if bytes.Compare(buffer.Bytes(), expect) != 0 {
//		file, _ := os.Open("result.dat")
//		file.Write(buffer.Bytes())
//		file.Close()
		t.Log(expect)
		t.Log(buffer.Bytes())
		t.Error("failed -- packet failed to encode to the epected byte array")
	}
}
